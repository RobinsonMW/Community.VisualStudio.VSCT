# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - main

pr: none

pool:
  vmImage: windows-latest

variables:
- group: Signing
- name: solution
  value: 'Community.VisualStudio.VSCT.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: buildMachine
  value: '$(Agent.MachineName)'
- name: buildUser
  value: '$(Build.QueuedBy)'

steps:
- checkout: self
  clean: true
  submodules: true
  persistCredentials: true

- powershell: 'Write-Host ("##vso[task.setvariable variable=MSBuildEmitSolution;]0")'
  displayName: 'Ensure MSBuildEmitSolution is not set'

- task: DownloadSecureFile@1
  displayName: 'Download secure file PFX'
  name: app_pfx
  inputs:
    secureFile: 'Cloud3D-codesign.pfx'

- task: DownloadSecureFile@1
  displayName: 'Download secure file SNK'
  name: snk
  inputs:
    secureFile: 'Cloud3D-codesign.snk'

- task: PowerShell@2
  displayName: 'Install Cert'
  inputs:
    targetType: filePath
    filePath: 'InstallCert.ps1'
    arguments: '-pfxpath $(app_pfx.secureFilePath) -password $(pfx_password)'

- task: NuGetToolInstaller@0
  inputs:
    versionSpec: 5.8.1

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'
    feedsToUse: 'config'
    includeNugetOrg: 'true'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    clean: true
    msbuildArgs: '/p:PackageOutputPath="$(Build.ArtifactStagingDirectory)" /p:BuildUser="$(buildUser)" /p:BuildMachine="$(buildMachine)" /p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)" /p:PublicRelease=true'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'

- task: PowerShell@2
  displayName: 'Detect packages'
  inputs:
   targetType: inline
   script: |
     $dir = $env:BUILD_ARTIFACTSTAGINGDIRECTORY + "\*.nupkg"
     Write-Host "Package Directory: $dir"
     $packages = Get-ChildItem -Path $dir -Recurse
     $ids = $packages | Select-Object -ExpandProperty name
     Write-Host "Packages: $ids"
     Write-Host "Package Count: $($packages.Count)"
     Write-Host ("##vso[task.setvariable variable=package_count;]$($packages.Count)")

- task: NuGetCommand@2
  condition: and(succeeded(), ne(variables['package_count'],0))
  displayName: 'NuGet Sign'
  inputs:
    command: custom
    arguments: 'sign $(Build.ArtifactStagingDirectory)\*.nupkg -Timestamper $(timestamper) -CertificateFingerprint $(app_pfx_thumbprint)'

- task: NuGetCommand@2
  displayName: Push Nuget Packages to nuget.org
  inputs:
    command: 'push'
    feedsToUse: 'config'
    includeNugetOrg: 'true'
    publishFeedCredentials: 'NuGet.org'
    externalFeedCredentials: 'NuGet.org'
    packagesToPush: $(Build.ArtifactStagingDirectory)\*.nupkg
    verbosityPush: 'Detailed'
    nuGetFeedType: 'external'

- powershell: |
    Write-Host "Tagging Build: $env:BuildNumber"

    git tag $env:BuildNumber
    git push origin $env:BuildNumber
  env:
    BuildNumber: $(Build.BuildNumber)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

- task: GithubRelease@0 
  displayName: 'Create GitHub Release'      
  inputs:
    gitHubConnection: github-czemacleod
    repositoryName: VsixCommunity/Community.VisualStudio.VSCT           
    assets: $(Build.ArtifactStagingDirectory)/*.nupkg
    addChangeLog: true

- task: PowerShell@2
  displayName: 'Remove Cert'
  inputs:
    targetType: filePath
    filePath: 'RemoveCert.ps1'
    arguments: '-pfxpath $(app_pfx.secureFilePath) -password $(pfx_password)'
  condition: always()
